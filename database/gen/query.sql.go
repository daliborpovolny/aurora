// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const assignStudentToParent = `-- name: AssignStudentToParent :exec
INSERT INTO student_parent (
    parent_id, student_id
) VALUES (
    ?, ?
)
`

type AssignStudentToParentParams struct {
	ParentID  sql.NullInt64 `json:"parent_id"`
	StudentID sql.NullInt64 `json:"student_id"`
}

func (q *Queries) AssignStudentToParent(ctx context.Context, arg AssignStudentToParentParams) error {
	_, err := q.db.ExecContext(ctx, assignStudentToParent, arg.ParentID, arg.StudentID)
	return err
}

const createAdmins = `-- name: CreateAdmins :one
INSERT INTO admins (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateAdmins(ctx context.Context, userID int64) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmins, userID)
	var i Admin
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createParent = `-- name: CreateParent :one
INSERT INTO parents (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateParent(ctx context.Context, userID int64) (Parent, error) {
	row := q.db.QueryRowContext(ctx, createParent, userID)
	var i Parent
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateStudent(ctx context.Context, userID int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, userID)
	var i Student
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateTeacher(ctx context.Context, userID int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, createTeacher, userID)
	var i Teacher
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name, last_name, email, hash
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, first_name, last_name, hash, email
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Hash      string `json:"hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Hash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const getAdmins = `-- name: GetAdmins :one
SELECT id, user_id FROM admins
WHERE id = ?
`

func (q *Queries) GetAdmins(ctx context.Context, id int64) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmins, id)
	var i Admin
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getParents = `-- name: GetParents :one
SELECT id, user_id FROM parents
WHERE id = ?
`

func (q *Queries) GetParents(ctx context.Context, id int64) (Parent, error) {
	row := q.db.QueryRowContext(ctx, getParents, id)
	var i Parent
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getStudent = `-- name: GetStudent :one
SELECT id, user_id FROM students
WHERE id = ?
`

func (q *Queries) GetStudent(ctx context.Context, id int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, getStudent, id)
	var i Student
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getTeachers = `-- name: GetTeachers :one
SELECT id, user_id FROM teachers
WHERE id = ?
`

func (q *Queries) GetTeachers(ctx context.Context, id int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, getTeachers, id)
	var i Teacher
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, hash, email FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, hash, email FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT id, user_id FROM admins
`

func (q *Queries) ListAdmins(ctx context.Context) ([]Admin, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Admin
	for rows.Next() {
		var i Admin
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParents = `-- name: ListParents :many
SELECT id, user_id FROM parents
`

func (q *Queries) ListParents(ctx context.Context) ([]Parent, error) {
	rows, err := q.db.QueryContext(ctx, listParents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Parent
	for rows.Next() {
		var i Parent
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudents = `-- name: ListStudents :many
SELECT id, user_id FROM students
`

func (q *Queries) ListStudents(ctx context.Context) ([]Student, error) {
	rows, err := q.db.QueryContext(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Student
	for rows.Next() {
		var i Student
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeachers = `-- name: ListTeachers :many
SELECT id, user_id FROM teachers
`

func (q *Queries) ListTeachers(ctx context.Context) ([]Teacher, error) {
	rows, err := q.db.QueryContext(ctx, listTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Teacher
	for rows.Next() {
		var i Teacher
		if err := rows.Scan(&i.ID, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, hash, email FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Hash,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
