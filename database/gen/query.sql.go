// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
)

const assignStudentToParent = `-- name: AssignStudentToParent :exec
INSERT INTO student_parent (
    parent_id, student_id
) VALUES (
    ?, ?
)
`

type AssignStudentToParentParams struct {
	ParentID  int64 `json:"parent_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) AssignStudentToParent(ctx context.Context, arg AssignStudentToParentParams) error {
	_, err := q.db.ExecContext(ctx, assignStudentToParent, arg.ParentID, arg.StudentID)
	return err
}

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admin (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateAdmin(ctx context.Context, userID int64) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, userID)
	var i Admin
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createClass = `-- name: CreateClass :one
INSERT INTO class (
    teacher_id, room, start_year, graduation_year
) VALUES (
    ?, ?, ?, ?
) RETURNING id, teacher_id, room, start_year, graduation_year, has_graduated
`

type CreateClassParams struct {
	TeacherID      int64  `json:"teacher_id"`
	Room           string `json:"room"`
	StartYear      int64  `json:"start_year"`
	GraduationYear int64  `json:"graduation_year"`
}

func (q *Queries) CreateClass(ctx context.Context, arg CreateClassParams) (Class, error) {
	row := q.db.QueryRowContext(ctx, createClass,
		arg.TeacherID,
		arg.Room,
		arg.StartYear,
		arg.GraduationYear,
	)
	var i Class
	err := row.Scan(
		&i.ID,
		&i.TeacherID,
		&i.Room,
		&i.StartYear,
		&i.GraduationYear,
		&i.HasGraduated,
	)
	return i, err
}

const createParent = `-- name: CreateParent :one
INSERT INTO parent (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateParent(ctx context.Context, userID int64) (Parent, error) {
	row := q.db.QueryRowContext(ctx, createParent, userID)
	var i Parent
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO session (
    user_id, cookie, created_at, expires_at
) VALUES (
    ?, ?, ?, ?
) RETURNING id, user_id, cookie, created_at, expires_at
`

type CreateSessionParams struct {
	UserID    int64  `json:"user_id"`
	Cookie    string `json:"cookie"`
	CreatedAt int64  `json:"created_at"`
	ExpiresAt int64  `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.UserID,
		arg.Cookie,
		arg.CreatedAt,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Cookie,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const createStudent = `-- name: CreateStudent :one
INSERT INTO student (
    user_id, class_id, has_graduated
) VALUES (
    ?, ?, 0
) RETURNING id, user_id, class_id, has_graduated
`

type CreateStudentParams struct {
	UserID  int64 `json:"user_id"`
	ClassID int64 `json:"class_id"`
}

func (q *Queries) CreateStudent(ctx context.Context, arg CreateStudentParams) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, arg.UserID, arg.ClassID)
	var i Student
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ClassID,
		&i.HasGraduated,
	)
	return i, err
}

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teacher (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateTeacher(ctx context.Context, userID int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, createTeacher, userID)
	var i Teacher
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user (
    first_name, last_name, email, hash
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, first_name, last_name, hash, email
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Hash      string `json:"hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Hash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const getAdmin = `-- name: GetAdmin :one

SELECT
    admin.id AS admin_id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM admin
JOIN user on admin.user_id = user.id
WHERE admin.id = ?
`

type GetAdminRow struct {
	AdminID   int64  `json:"admin_id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

// * Admin
func (q *Queries) GetAdmin(ctx context.Context, id int64) (GetAdminRow, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, id)
	var i GetAdminRow
	err := row.Scan(
		&i.AdminID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getClass = `-- name: GetClass :one

SELECT
    class.id AS class_id,
    class.teacher_id,
    class.room,
    class.start_year,
    class.graduation_year
FROM class
WHERE class.id = ?
`

type GetClassRow struct {
	ClassID        int64  `json:"class_id"`
	TeacherID      int64  `json:"teacher_id"`
	Room           string `json:"room"`
	StartYear      int64  `json:"start_year"`
	GraduationYear int64  `json:"graduation_year"`
}

// * Class
func (q *Queries) GetClass(ctx context.Context, id int64) (GetClassRow, error) {
	row := q.db.QueryRowContext(ctx, getClass, id)
	var i GetClassRow
	err := row.Scan(
		&i.ClassID,
		&i.TeacherID,
		&i.Room,
		&i.StartYear,
		&i.GraduationYear,
	)
	return i, err
}

const getParent = `-- name: GetParent :one

SELECT
    parent.id AS parent_id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM parent
JOIN user on parent.user_id = user.id
WHERE parent.id = ?
`

type GetParentRow struct {
	ParentID  int64  `json:"parent_id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

// * Parent
func (q *Queries) GetParent(ctx context.Context, id int64) (GetParentRow, error) {
	row := q.db.QueryRowContext(ctx, getParent, id)
	var i GetParentRow
	err := row.Scan(
		&i.ParentID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getParentsOfStudent = `-- name: GetParentsOfStudent :many
SELECT
    parent.id AS parent_id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM student_parent
JOIN parent ON parent.id = student_parent.parent_id
JOIN user ON user.id = parent.user_id
WHERE student_parent.student_id = ?
`

type GetParentsOfStudentRow struct {
	ParentID  int64  `json:"parent_id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) GetParentsOfStudent(ctx context.Context, studentID int64) ([]GetParentsOfStudentRow, error) {
	rows, err := q.db.QueryContext(ctx, getParentsOfStudent, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetParentsOfStudentRow
	for rows.Next() {
		var i GetParentsOfStudentRow
		if err := rows.Scan(
			&i.ParentID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStudent = `-- name: GetStudent :one

SELECT 
    student.id AS student_id,
    student.class_id,
    user.id AS user_id,
    user.first_name, 
    user.last_name, 
    user.email
FROM student
JOIN user ON student.user_id = user.id
WHERE student.id = ?
`

type GetStudentRow struct {
	StudentID int64  `json:"student_id"`
	ClassID   int64  `json:"class_id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

// * Student
func (q *Queries) GetStudent(ctx context.Context, id int64) (GetStudentRow, error) {
	row := q.db.QueryRowContext(ctx, getStudent, id)
	var i GetStudentRow
	err := row.Scan(
		&i.StudentID,
		&i.ClassID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getStudentOfParent = `-- name: GetStudentOfParent :many
SELECT
    student.id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM student
JOIN student_parent on student_parent.student_id = student.id
JOIN user on student.user_id = user.id
WHERE student_parent.parent_id = ?
`

type GetStudentOfParentRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) GetStudentOfParent(ctx context.Context, parentID int64) ([]GetStudentOfParentRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentOfParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentOfParentRow
	for rows.Next() {
		var i GetStudentOfParentRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacher = `-- name: GetTeacher :one

SELECT
    teacher.id AS teacher_id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM teacher
JOIN user ON teacher.user_id = user.id
WHERE teacher.id = ?
`

type GetTeacherRow struct {
	TeacherID int64  `json:"teacher_id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

// * Teacher
func (q *Queries) GetTeacher(ctx context.Context, id int64) (GetTeacherRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacher, id)
	var i GetTeacherRow
	err := row.Scan(
		&i.TeacherID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getUser = `-- name: GetUser :one

SELECT id, first_name, last_name, hash, email FROM user
WHERE id = ? LIMIT 1
`

// * User
func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, hash, email FROM user
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const getUserBySessionCookie = `-- name: GetUserBySessionCookie :one

SELECT user.id, first_name, last_name, hash, email, session.id, user_id, cookie, created_at, expires_at FROM user
JOIN session on user.id = session.user_id
WHERE session.cookie = ?
`

type GetUserBySessionCookieRow struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Hash      string `json:"hash"`
	Email     string `json:"email"`
	ID_2      int64  `json:"id_2"`
	UserID    int64  `json:"user_id"`
	Cookie    string `json:"cookie"`
	CreatedAt int64  `json:"created_at"`
	ExpiresAt int64  `json:"expires_at"`
}

// * Session
func (q *Queries) GetUserBySessionCookie(ctx context.Context, cookie string) (GetUserBySessionCookieRow, error) {
	row := q.db.QueryRowContext(ctx, getUserBySessionCookie, cookie)
	var i GetUserBySessionCookieRow
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
		&i.ID_2,
		&i.UserID,
		&i.Cookie,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const graduateClass = `-- name: GraduateClass :exec

UPDATE class
SET
    has_graduated = 1
WHERE
    class.id = ?
`

// * Graduation
func (q *Queries) GraduateClass(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, graduateClass, id)
	return err
}

const graduateStudentOfClass = `-- name: GraduateStudentOfClass :exec
UPDATE student
SET
    has_graduated = 1
WHERE student.class_id = ?
`

func (q *Queries) GraduateStudentOfClass(ctx context.Context, classID int64) error {
	_, err := q.db.ExecContext(ctx, graduateStudentOfClass, classID)
	return err
}

const listAdmins = `-- name: ListAdmins :many
SELECT
    admin.id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM admin
JOIN user on admin.user_id = user.id
`

type ListAdminsRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListAdmins(ctx context.Context) ([]ListAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAdminsRow
	for rows.Next() {
		var i ListAdminsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClasses = `-- name: ListClasses :many
SELECT
    class.id AS class_id,
    class.teacher_id,
    class.room,
    class.start_year,
    class.graduation_year
FROM class
WHERE class.has_graduated = 0
`

type ListClassesRow struct {
	ClassID        int64  `json:"class_id"`
	TeacherID      int64  `json:"teacher_id"`
	Room           string `json:"room"`
	StartYear      int64  `json:"start_year"`
	GraduationYear int64  `json:"graduation_year"`
}

func (q *Queries) ListClasses(ctx context.Context) ([]ListClassesRow, error) {
	rows, err := q.db.QueryContext(ctx, listClasses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListClassesRow
	for rows.Next() {
		var i ListClassesRow
		if err := rows.Scan(
			&i.ClassID,
			&i.TeacherID,
			&i.Room,
			&i.StartYear,
			&i.GraduationYear,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParents = `-- name: ListParents :many
SELECT
    parent.id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM parent
JOIN user on parent.user_id = user.id
`

type ListParentsRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListParents(ctx context.Context) ([]ListParentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listParents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListParentsRow
	for rows.Next() {
		var i ListParentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudents = `-- name: ListStudents :many
SELECT 
    student.id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM student
JOIN user ON student.user_id = user.id
WHERE student.has_graduated = 0
`

type ListStudentsRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListStudents(ctx context.Context) ([]ListStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStudentsRow
	for rows.Next() {
		var i ListStudentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudentsOfClass = `-- name: ListStudentsOfClass :many
SELECT 
    student.id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM student
JOIN user ON student.user_id = user.id
WHERE student.class_id = ?
`

type ListStudentsOfClassRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListStudentsOfClass(ctx context.Context, classID int64) ([]ListStudentsOfClassRow, error) {
	rows, err := q.db.QueryContext(ctx, listStudentsOfClass, classID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStudentsOfClassRow
	for rows.Next() {
		var i ListStudentsOfClassRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeachers = `-- name: ListTeachers :many
SELECT
    teacher.id,
    user.id AS user_id,
    user.first_name,
    user.last_name,
    user.email
FROM teacher
JOIN user ON teacher.user_id = user.id
`

type ListTeachersRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListTeachers(ctx context.Context) ([]ListTeachersRow, error) {
	rows, err := q.db.QueryContext(ctx, listTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTeachersRow
	for rows.Next() {
		var i ListTeachersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, hash, email FROM user
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Hash,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
