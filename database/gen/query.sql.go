// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package database

import (
	"context"
)

const assignStudentToParent = `-- name: AssignStudentToParent :exec
INSERT INTO student_parent (
    parent_id, student_id
) VALUES (
    ?, ?
)
`

type AssignStudentToParentParams struct {
	ParentID  int64 `json:"parent_id"`
	StudentID int64 `json:"student_id"`
}

func (q *Queries) AssignStudentToParent(ctx context.Context, arg AssignStudentToParentParams) error {
	_, err := q.db.ExecContext(ctx, assignStudentToParent, arg.ParentID, arg.StudentID)
	return err
}

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateAdmin(ctx context.Context, userID int64) (Admin, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, userID)
	var i Admin
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createParent = `-- name: CreateParent :one
INSERT INTO parents (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateParent(ctx context.Context, userID int64) (Parent, error) {
	row := q.db.QueryRowContext(ctx, createParent, userID)
	var i Parent
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createStudent = `-- name: CreateStudent :one
INSERT INTO students (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateStudent(ctx context.Context, userID int64) (Student, error) {
	row := q.db.QueryRowContext(ctx, createStudent, userID)
	var i Student
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createTeacher = `-- name: CreateTeacher :one
INSERT INTO teachers (
    user_id
) VALUES (
    ?
) RETURNING id, user_id
`

func (q *Queries) CreateTeacher(ctx context.Context, userID int64) (Teacher, error) {
	row := q.db.QueryRowContext(ctx, createTeacher, userID)
	var i Teacher
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name, last_name, email, hash
) VALUES (
    ?, ?, ?, ?
)
RETURNING id, first_name, last_name, hash, email
`

type CreateUserParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
	Hash      string `json:"hash"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Hash,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const getAdmin = `-- name: GetAdmin :one
SELECT
    admins.id,
    users.id AS user_id,
    users.first_name,
    users.last_name,
    users.email
FROM admins
JOIN users on admins.user_id = users.id
WHERE admins.id = ?
`

type GetAdminRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) GetAdmin(ctx context.Context, id int64) (GetAdminRow, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, id)
	var i GetAdminRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getParent = `-- name: GetParent :one
SELECT
    parents.id,
    users.id AS users_id,
    users.first_name,
    users.last_name,
    users.email
FROM parents
JOIN users on parents.user_id = users.id
WHERE parents.id = ?
`

type GetParentRow struct {
	ID        int64  `json:"id"`
	UsersID   int64  `json:"users_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) GetParent(ctx context.Context, id int64) (GetParentRow, error) {
	row := q.db.QueryRowContext(ctx, getParent, id)
	var i GetParentRow
	err := row.Scan(
		&i.ID,
		&i.UsersID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getStudent = `-- name: GetStudent :one
SELECT 
    students.id,
    users.id AS user_id,
    users.first_name, 
    users.last_name, 
    users.email
FROM students
JOIN users ON students.user_id = users.id
WHERE students.id = ?
`

type GetStudentRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) GetStudent(ctx context.Context, id int64) (GetStudentRow, error) {
	row := q.db.QueryRowContext(ctx, getStudent, id)
	var i GetStudentRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getStudentsOfParent = `-- name: GetStudentsOfParent :many
SELECT
    students.id,
    users.id AS user_id,
    users.first_name,
    users.last_name,
    users.email
FROM student_parent
JOIN students on student_parent.student_id = students.id
JOIN users on students.user_id = users.id
WHERE student_parent.parent_id = ?
`

type GetStudentsOfParentRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) GetStudentsOfParent(ctx context.Context, parentID int64) ([]GetStudentsOfParentRow, error) {
	rows, err := q.db.QueryContext(ctx, getStudentsOfParent, parentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetStudentsOfParentRow
	for rows.Next() {
		var i GetStudentsOfParentRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTeacher = `-- name: GetTeacher :one
SELECT
    teachers.id,
    users.id AS user_id,
    users.first_name,
    users.last_name,
    users.email
FROM teachers
JOIN users ON teacher.user_id = users.id
WHERE teachers.id = ?
`

type GetTeacherRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) GetTeacher(ctx context.Context, id int64) (GetTeacherRow, error) {
	row := q.db.QueryRowContext(ctx, getTeacher, id)
	var i GetTeacherRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, hash, email FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, hash, email FROM users
WHERE email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Hash,
		&i.Email,
	)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT
    admins.id,
    users.id AS user_id,
    users.first_name,
    users.last_name,
    users.email
FROM admins
JOIN users on admins.user_id = users.id
`

type ListAdminsRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListAdmins(ctx context.Context) ([]ListAdminsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAdminsRow
	for rows.Next() {
		var i ListAdminsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listParents = `-- name: ListParents :many
SELECT
    parents.id,
    users.id AS users_id,
    users.first_name,
    users.last_name,
    users.email
FROM parents
JOIN users on parents.user_id = users.id
`

type ListParentsRow struct {
	ID        int64  `json:"id"`
	UsersID   int64  `json:"users_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListParents(ctx context.Context) ([]ListParentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listParents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListParentsRow
	for rows.Next() {
		var i ListParentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UsersID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudents = `-- name: ListStudents :many
SELECT 
    students.id,
    users.id AS user_id,
    users.first_name, 
    users.last_name, 
    users.email
FROM students
JOIN users ON students.user_id = users.id
`

type ListStudentsRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListStudents(ctx context.Context) ([]ListStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listStudents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStudentsRow
	for rows.Next() {
		var i ListStudentsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTeachers = `-- name: ListTeachers :many
SELECT
    teachers.id,
    users.id AS user_id,
    users.first_name,
    users.last_name,
    users.email
FROM teachers
JOIN users ON teachers.user_id = users.id
`

type ListTeachersRow struct {
	ID        int64  `json:"id"`
	UserID    int64  `json:"user_id"`
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

func (q *Queries) ListTeachers(ctx context.Context) ([]ListTeachersRow, error) {
	rows, err := q.db.QueryContext(ctx, listTeachers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTeachersRow
	for rows.Next() {
		var i ListTeachersRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, hash, email FROM users
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Hash,
			&i.Email,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
